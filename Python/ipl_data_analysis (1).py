# -*- coding: utf-8 -*-
"""IPL_Data_Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n3nT4bGNq70RgRuLJTEWkPhrWiQXtU-8
"""



"""It loads necessary tools for data analysis & plots.

"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Set style
sns.set(style="darkgrid")

"""Load the CSV Files"""

# Read Excel files, not CSV
matches = pd.read_excel('/content/ipl_matches_analysis.xlsx')
deliveries = pd.read_excel('/content/ipl_delivers_analysis.xlsx')

matches.head()

deliveries.head()

"""Check the Shape (Rows × Columns)"""

print("Matches data:", matches.shape)
print("Deliveries data:", deliveries.shape)

"""Null values"""

matches.isnull().sum()

import pandas as pd

excel_file = '/content/ipl_matches_analysis.xlsx'  # or your correct file path
sheet_names = pd.ExcelFile(excel_file).sheet_names
print(sheet_names)

matches = pd.read_excel(excel_file, sheet_name='matches')
matches.columns = matches.columns.str.strip().str.lower()
print(matches.columns)

deliveries = pd.read_excel('/content/ipl_delivers_analysis.xlsx', sheet_name='deliveries')
deliveries.columns = deliveries.columns.str.strip().str.lower()

matches = matches.loc[:, ~matches.columns.str.contains('^unnamed')]

print(matches[['id', 'city', 'season']].head())

"""Exploratory Data Analysis (EDA)
Number of Matches per Season
"""

import matplotlib.pyplot as plt

# Group by season and count match IDs
matches_per_season = matches.groupby('season')['id'].count()

# Plot it
plt.figure(figsize=(10,6))
matches_per_season.plot(kind='bar', color='skyblue')
plt.title('Total Matches Per Season')
plt.xlabel('Season')
plt.ylabel('Number of Matches')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

matches['winner'].value_counts().head(10)

"""Most Matches Played by Each Team"""

teams1 = matches['team1'].value_counts()
teams2 = matches['team2'].value_counts()

# Add both sides (team1 and team2) for total matches played
total_matches_played = teams1.add(teams2, fill_value=0).sort_values(ascending=False)
print(total_matches_played)



""" Toss Analysis – Toss Winners"""

toss_wins = matches['toss_winner'].value_counts()
print(toss_wins)

toss_wins.head(10).plot(kind='barh', color='lightgreen')
plt.title("Toss Wins by Team")
plt.xlabel("Toss Wins")
plt.ylabel("Team")
plt.grid(axis='x', linestyle='--', alpha=0.6)
plt.tight_layout()
plt.show()



"""Toss Decision – Bat or Field?"""

toss_decision = matches['toss_decision'].value_counts()
print(toss_decision)

toss_decision.plot(kind='pie', autopct='%1.1f%%', colors=['gold', 'skyblue'])
plt.title("Toss Decision Distribution")
plt.ylabel('')
plt.show()



"""Most Popular venue"""

venue_counts = matches['venue'].value_counts().head(10)
print(venue_counts)

venue_counts.plot(kind='bar', color='coral')
plt.title("Top 10 Most Frequent IPL Venues")
plt.xlabel("Venue")
plt.ylabel("Match Count")
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.6)
plt.tight_layout()
plt.show()

"""Player-Level Analysis using deliveries Data

Load the deliveries Excel file
"""

import pandas as pd

# ✅ Wrap the path in quotes (it's a string)
excel_path = '/content/ipl_matches_analysis.xlsx'

# Load the Excel file
xls = pd.ExcelFile(excel_path)

# Show available sheet names
print(xls.sheet_names)

print(xls.sheet_names)

matches = pd.read_excel('/content/ipl_matches_analysis.xlsx', sheet_name='matches')
matches.head()

print(matches.columns)

# List sheet names
pd.ExcelFile('/content/ipl_delivers_analysis.xlsx').sheet_names

deliveries = pd.read_excel('/content/ipl_delivers_analysis.xlsx', sheet_name='Sheet1')
deliveries.head()

print(deliveries.columns)



"""Top 10 batsman"""

print(deliveries.columns)

import pandas as pd

deliveries_excel = pd.ExcelFile('/content/ipl_delivers_analysis.xlsx')
print(deliveries_excel.sheet_names)

import pandas as pd

# Load the deliveries sheet
deliveries = pd.read_excel('/content/ipl_delivers_analysis.xlsx', sheet_name='deliveries')

# Confirm the columns
print(deliveries.columns)

# Group by batsman and sum the runs
top_batsmen = deliveries.groupby('batsman')['batsman_runs'].sum().sort_values(ascending=False).head(10)
print(top_batsmen)

"""plotting top 10 batsman"""

import matplotlib.pyplot as plt

top_batsmen.plot(kind='bar', color='mediumseagreen')
plt.title("Top 10 Run Scorers in IPL")
plt.ylabel("Runs")
plt.xlabel("Batsman")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""Top 10 Wicket-Takers in IPL"""

# Exclude run outs and NaN dismissals
filtered_deliveries = deliveries[deliveries['dismissal_kind'].notna()]
filtered_deliveries = filtered_deliveries[filtered_deliveries['dismissal_kind'] != 'run out']

# Count wickets per bowler
top_bowlers = filtered_deliveries['bowler'].value_counts().head(10)
print(top_bowlers)

top_bowlers.plot(kind='bar', color='crimson')
plt.title("Top 10 Wicket Takers in IPL")
plt.ylabel("Wickets")
plt.xlabel("Bowler")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()



"""Top 10 Six Hitters in IPL"""

# Filter only sixes
sixes = deliveries[deliveries['batsman_runs'] == 6]

# Count sixes by batsman
top_six_hitters = sixes['batsman'].value_counts().head(10)
print(top_six_hitters)

top_six_hitters = sixes['batsman'].value_counts().head(10)

top_six_hitters.plot(kind='bar', color='orange')
plt.title("Top 10 Six Hitters in IPL")
plt.ylabel("Number of Sixes")
plt.xlabel("Batsman")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()



"""Top 10 boundry hitters"""

# Filter only boundaries (4s and 6s)
boundaries = deliveries[deliveries['batsman_runs'].isin([4, 6])]

# Count boundaries per batsman
top_boundary_hitters = boundaries['batsman'].value_counts().head(10)
print(top_boundary_hitters)

top_boundary_hitters = boundaries['batsman'].value_counts().head(10)

top_boundary_hitters.plot(kind='bar', color='purple')
plt.title("Top 10 Boundary Hitters in IPL")
plt.ylabel("Number of Boundaries")
plt.xlabel("Batsman")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()



"""Best Bowling Economy (Minimum 200 balls bowled)
Bowling economy = total runs conceded / total overs bowled

"""

print(deliveries.columns.tolist())

# Only legal deliveries: no wides, no no-balls
legal_deliveries = deliveries[(deliveries['wide_runs'] == 0) & (deliveries['noball_runs'] == 0)]

# calcualte the balls bowled
balls_bowled = legal_deliveries.groupby('bowler').count()['ball']

runs_conceded = deliveries.groupby('bowler')['total_runs'].sum()
#calculate the runs

#calculate the overs
overs_bowled = balls_bowled / 6

#compute economy rate
economy_rate = runs_conceded / overs_bowled

#Filter bowlers who bowled atleast 200 balls
valid_bowlers = balls_bowled[balls_bowled >= 200].index
economy_rate = economy_rate[valid_bowlers]

#Top 10 bowlers by economy rate
best_economy = economy_rate.sort_values().head(10)
print(best_economy)

import matplotlib.pyplot as plt

best_economy.plot(kind='bar', color='tomato')
plt.title("Top 10 Economical Bowlers in IPL")
plt.ylabel("Economy Rate")
plt.xlabel("Bowler")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()



"""Top Strike Rate Batsmen (Min 200 Balls Faced)
Strike Rate (SR) = (Total Runs / Balls Faced) * 100


"""

#Calculate runs by each batsman
runs = deliveries.groupby('batsman')['batsman_runs'].sum()

#Calculate balls faced
balls_faced = deliveries[deliveries['wide_runs'] == 0].groupby('batsman')['ball'].count()

#Compute strike rate
strike_rate = (runs / balls_faced) * 100

#Filter batsman who faced atleast 200 balls
valid_batsmen = balls_faced[balls_faced >= 200].index
strike_rate = strike_rate[valid_batsmen]

#Top 10 batsman by strike rate
top_strike_rate = strike_rate.sort_values(ascending=False).head(10)
print(top_strike_rate)

#Plot
top_strike_rate.plot(kind='bar', color='darkorange')
plt.title("Top 10 Strike Rate Batsmen in IPL")
plt.ylabel("Strike Rate")
plt.xlabel("Batsman")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""Most Number of Fours and Sixes by a Batsman

1.   Top 10 Batsmen with Most Fours
2.   Top 10 Batsmen with Most Sixes









"""

#FOURS ANALYSIS

fours = deliveries[deliveries['batsman_runs'] == 4]
top_fours = fours.groupby('batsman')['batsman_runs'].count().sort_values(ascending=False).head(10)
print("Top 10 Batsmen with Most Fours:\n", top_fours)

# Plot
top_fours.plot(kind='bar', color='royalblue')
plt.title("Top 10 Batsmen with Most Fours in IPL")
plt.ylabel("Number of Fours")
plt.xlabel("Batsman")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#SIX ANALYSIS

sixes = deliveries[deliveries['batsman_runs'] == 6]
top_sixes = sixes.groupby('batsman')['batsman_runs'].count().sort_values(ascending=False).head(10)
print("Top 10 Batsmen with Most Sixes:\n", top_sixes)

# Plot
top_sixes.plot(kind='bar', color='crimson')
plt.title("Top 10 Batsmen with Most Sixes in IPL")
plt.ylabel("Number of Sixes")
plt.xlabel("Batsman")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()



"""Step 12: Best All-Rounders (Runs + Wickets)


1.Scored Runs as Batsmen

2.Took Wickets as Bowlers

Then combine both metrics to identify true All-Rounders.
"""

#Batsman runs

batsman_runs = deliveries.groupby('batsman')['batsman_runs'].sum()

#BOWLER WICKETS

wickets = deliveries[deliveries['player_dismissed'].notnull()]
bowler_wickets = wickets.groupby('bowler')['player_dismissed'].count()

#MERGE AND GET ALL ROUNDERS

all_rounders = pd.merge(batsman_runs, bowler_wickets, left_index=True, right_index=True, how='inner')
all_rounders.columns = ['total_runs', 'total_wickets']
all_rounders['allrounder_score'] = all_rounders['total_runs'] + (all_rounders['total_wickets'] * 20)

# Top 10 All-Rounders based on custom score (runs + 20 × wickets)
top_allrounders = all_rounders.sort_values(by='allrounder_score', ascending=False).head(10)
print(top_allrounders)

top_allrounders[['total_runs', 'total_wickets']].plot(kind='bar', figsize=(10,6))
plt.title("Top 10 All-Rounders in IPL (Runs + Wickets)")
plt.ylabel("Runs / Wickets")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()



"""Most Consistent Batsmen (by Average Runs per Match)
1. We’ll calculate Batting Average per Match = Total Runs / Matches Played
"""

import pandas as pd
import matplotlib.pyplot as plt

# Load deliveries sheet
excel_path = '/content/ipl_delivers_analysis.xlsx'
deliveries = pd.read_excel(excel_path, sheet_name='deliveries')

# STEP 13: Most Consistent Batsmen (Top 10 by runs)
top_batsmen = deliveries.groupby('batsman')['batsman_runs'].sum().sort_values(ascending=False).head(10)
print("🏏 Top 10 Most Consistent Batsmen (by Total Runs):")
print(top_batsmen)

# Plot Most Consistent Batsmen
top_batsmen.plot(kind='bar', color='orange', figsize=(10,6))
plt.title("Top 10 Consistent Batsmen - Total Runs")
plt.ylabel("Runs Scored")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# STEP 14: Strike Rate Analysis
# Calculate total runs
runs = deliveries.groupby('batsman')['batsman_runs'].sum()

# Calculate balls faced (excluding wides)
balls = deliveries[deliveries['wide_runs'] == 0].groupby('batsman').count()['ball']

# Calculate strike rate
strike_rate = (runs / balls) * 100
strike_rate = strike_rate.dropna().sort_values(ascending=False).head(10)

print("\n⚡ Top 10 Batsmen by Strike Rate:")
print(strike_rate)

# Plot Strike Rate
strike_rate.plot(kind='bar', color='crimson', figsize=(10,6))
plt.title("Top 10 Strike Rates")
plt.ylabel("Strike Rate")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()



"""TOP 6 HITTERS"""

import pandas as pd
import matplotlib.pyplot as plt

# Load deliveries sheet
excel_path = '/content/ipl_delivers_analysis.xlsx'
deliveries = pd.read_excel(excel_path, sheet_name='deliveries')

# STEP 15: Top Six Hitters
# Filter only deliveries that resulted in a six
sixes = deliveries[deliveries['batsman_runs'] == 6]

# Count sixes by batsman
top_six_hitters = sixes['batsman'].value_counts().head(10)

print("💥 Top 10 Six Hitters in IPL:")
print(top_six_hitters)

# Plot Top Six Hitters
top_six_hitters.plot(kind='bar', color='purple', figsize=(10,6))
plt.title("Top 10 Six Hitters in IPL")
plt.ylabel("Number of Sixes")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()



"""Boundary Distribution (4s vs 6s)."""

import pandas as pd
import matplotlib.pyplot as plt

# Load deliveries sheet
excel_path = '/content/ipl_delivers_analysis.xlsx'
deliveries = pd.read_excel(excel_path, sheet_name='deliveries')

# STEP 16: Boundary Distribution (4s vs 6s)
fours = deliveries[deliveries['batsman_runs'] == 4]
sixes = deliveries[deliveries['batsman_runs'] == 6]

# Count total number of 4s and 6s
boundary_counts = pd.Series([len(fours), len(sixes)], index=['Fours (4s)', 'Sixes (6s)'])

print("🏏 Boundary Distribution:")
print(boundary_counts)

# Plot
colors = ['orange', 'purple']
boundary_counts.plot(kind='bar', color=colors, figsize=(7,5))
plt.title("Total Fours vs Sixes in IPL")
plt.ylabel("Count")
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()

"""Top Bowlers (Most Wickets Taken)."""

import pandas as pd
import matplotlib.pyplot as plt

# Load deliveries sheet
excel_path = '/content/ipl_delivers_analysis.xlsx'
deliveries = pd.read_excel(excel_path, sheet_name='deliveries')

# STEP 17: Top 10 Bowlers with Most Wickets
# Filter only valid dismissals where a player was actually out
valid_dismissals = deliveries[deliveries['dismissal_kind'].notnull() &
                              (deliveries['dismissal_kind'] != 'run out')]

# Count wickets per bowler
top_bowlers = valid_dismissals['bowler'].value_counts().head(10)

print("🎯 Top 10 Wicket Takers in IPL:")
print(top_bowlers)

# Plot
top_bowlers.plot(kind='bar', color='firebrick', figsize=(8,5))
plt.title("Top 10 Wicket Takers in IPL")
plt.xlabel("Bowler")
plt.ylabel("Wickets")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""Most Dangerous Bowlers (Best Strike Rate).
1.Strike Rate=
Total Wickets Taken/
Total Balls Bowled
​

"""

import pandas as pd
import matplotlib.pyplot as plt

# Load the deliveries data again (if needed)
excel_path = '/content/ipl_delivers_analysis.xlsx'
deliveries = pd.read_excel(excel_path, sheet_name='deliveries')

# Filter out deliveries where no-ball or wide was bowled (they don’t count in official balls)
valid_balls = deliveries[(deliveries['noball_runs'] == 0) & (deliveries['wide_runs'] == 0)]

# Count balls bowled by each bowler
balls_bowled = valid_balls['bowler'].value_counts()

# Filter valid dismissals (excluding 'run out')
valid_dismissals = deliveries[deliveries['dismissal_kind'].notnull() &
                              (deliveries['dismissal_kind'] != 'run out')]

# Count wickets taken by each bowler
wickets_taken = valid_dismissals['bowler'].value_counts()

# Combine both series into a DataFrame
strike_rate_df = pd.DataFrame({
    'balls_bowled': balls_bowled,
    'wickets': wickets_taken
}).dropna()

# Calculate strike rate
strike_rate_df['strike_rate'] = strike_rate_df['balls_bowled'] / strike_rate_df['wickets']

# Filter bowlers with at least 50 wickets to avoid anomalies
strike_rate_df = strike_rate_df[strike_rate_df['wickets'] >= 50]

# Sort by lowest strike rate (best)
top_strike_rate_bowlers = strike_rate_df.sort_values(by='strike_rate').head(10)

print("🎯 Top 10 Dangerous Bowlers (Best Strike Rate):")
print(top_strike_rate_bowlers[['strike_rate']])

# Plot
top_strike_rate_bowlers['strike_rate'].plot(kind='bar', color='darkorange', figsize=(8,5))
plt.title("Top 10 Dangerous Bowlers (Best Strike Rate)")
plt.xlabel("Bowler")
plt.ylabel("Strike Rate (Balls per Wicket)")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""Most Extras Conceded by Bowlers."""

import pandas as pd
import matplotlib.pyplot as plt

# Load deliveries sheet again if needed
excel_path = '/content/ipl_delivers_analysis.xlsx'
deliveries = pd.read_excel(excel_path, sheet_name='deliveries')

# Group by bowler and sum extras they conceded
extras_by_bowler = deliveries.groupby('bowler')[['noball_runs', 'wide_runs']].sum()

# Total extras = no-balls + wides (only these are bowler's fault)
extras_by_bowler['total_extras'] = extras_by_bowler['noball_runs'] + extras_by_bowler['wide_runs']

# Top 10 bowlers with most extras conceded
top_extras = extras_by_bowler.sort_values(by='total_extras', ascending=False).head(10)

print("🎯 Top 10 Bowlers Who Conceded Most Extras (No-balls + Wides):")
print(top_extras[['total_extras']])

# Plot
top_extras['total_extras'].plot(kind='bar', color='crimson', figsize=(8,5))
plt.title("Top 10 Bowlers Who Conceded Most Extras")
plt.xlabel("Bowler")
plt.ylabel("Extras Conceded")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""Total Sixes by Each Team"""

import pandas as pd
import matplotlib.pyplot as plt

# Load the deliveries sheet if needed
excel_path = '/content/ipl_delivers_analysis.xlsx'
deliveries = pd.read_excel(excel_path, sheet_name='deliveries')

# Filter only sixes
sixes = deliveries[deliveries['batsman_runs'] == 6]

# Count sixes per team
sixes_by_team = sixes['batting_team'].value_counts().sort_values(ascending=False)

print("💥 Total Sixes Hit by Each Team:")
print(sixes_by_team)

# Plot
sixes_by_team.plot(kind='bar', color='purple', figsize=(10,6))
plt.title("Total Sixes by Each Team")
plt.xlabel("Team")
plt.ylabel("Number of Sixes")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()



"""Total Sixes by Each Player"""

import pandas as pd
import matplotlib.pyplot as plt

# Load the deliveries sheet if needed
excel_path = '/content/ipl_delivers_analysis.xlsx'
deliveries = pd.read_excel(excel_path, sheet_name='deliveries')

# Filter only sixes
sixes = deliveries[deliveries['batsman_runs'] == 6]

# Count sixes per batsman
sixes_by_batsman = sixes['batsman'].value_counts().sort_values(ascending=False).head(10)

print("💣 Top 10 Batsmen with Most Sixes:")
print(sixes_by_batsman)

# Plot
sixes_by_batsman.plot(kind='bar', color='darkorange', figsize=(10,6))
plt.title("Top 10 Batsmen with Most Sixes")
plt.xlabel("Batsman")
plt.ylabel("Number of Sixes")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()



"""Most Economical Bowlers."""

import pandas as pd
import matplotlib.pyplot as plt

# Load the deliveries data again if needed
excel_path = '/content/ipl_delivers_analysis.xlsx'
deliveries = pd.read_excel(excel_path, sheet_name='deliveries')

# Filter legal deliveries (exclude wides and no-balls)
legal_deliveries = deliveries[(deliveries['wide_runs'] == 0) & (deliveries['noball_runs'] == 0)]

# Total runs conceded per bowler
total_runs_conceded = legal_deliveries.groupby('bowler')['total_runs'].sum()

# Total legal balls bowled per bowler
total_balls = legal_deliveries.groupby('bowler').count()['ball']

# Filter only bowlers with more than 200 balls
qualified_bowlers = total_balls[total_balls >= 200].index

# Calculate economy rate = runs / (balls/6)
economy = (total_runs_conceded[qualified_bowlers] / (total_balls[qualified_bowlers] / 6)).sort_values()

# Take top 10 most economical bowlers
top_economical_bowlers = economy.head(10)

print("🎯 Top 10 Most Economical Bowlers (Min 200 balls):")
print(top_economical_bowlers)

# Plot
top_economical_bowlers.plot(kind='bar', color='seagreen', figsize=(10,6))
plt.title("Top 10 Most Economical Bowlers in IPL")
plt.xlabel("Bowler")
plt.ylabel("Economy Rate")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()



"""Most wickets taken"""

# Step 23: Most Wickets Taken

# Filter valid dismissals (excluding run outs)
wickets = deliveries[(deliveries['player_dismissed'].notnull()) & (deliveries['dismissal_kind'] != 'run out')]

# Count wickets per bowler
most_wickets = wickets.groupby('bowler')['player_dismissed'].count().sort_values(ascending=False).head(10)

# Display results
print("Top 10 Wicket-Takers in IPL:")
print(most_wickets)

# Plot
import matplotlib.pyplot as plt

most_wickets.plot(kind='bar', color='orange', figsize=(10, 5))
plt.title('Top 10 Wicket-Takers in IPL')
plt.xlabel('Bowler')
plt.ylabel('Wickets Taken')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()



"""Best Bowling Average (Top 10 Bowlers)"""

# Step 24: Best Bowling Averages

# Total runs conceded by each bowler
runs_conceded = deliveries.groupby('bowler')['total_runs'].sum()

# Valid dismissals (exclude run outs)
valid_wickets = deliveries[(deliveries['player_dismissed'].notnull()) & (deliveries['dismissal_kind'] != 'run out')]

# Total wickets taken by each bowler
wickets_taken = valid_wickets.groupby('bowler')['player_dismissed'].count()

# Combine both
bowler_stats = pd.concat([runs_conceded, wickets_taken], axis=1)
bowler_stats.columns = ['runs_conceded', 'wickets']

# Remove bowlers with less than 20 wickets (to avoid noise)
bowler_stats = bowler_stats[bowler_stats['wickets'] >= 20]

# Calculate bowling average
bowler_stats['average'] = bowler_stats['runs_conceded'] / bowler_stats['wickets']

# Top 10 bowlers with best average
best_bowling_avg = bowler_stats.sort_values(by='average').head(10)

# Display result
print("Top 10 Best Bowling Averages (min 20 wickets):")
print(best_bowling_avg[['average']])

# Plot
best_bowling_avg['average'].plot(kind='bar', figsize=(10,5), color='purple')
plt.title('Top 10 Best Bowling Averages (min 20 wickets)')
plt.xlabel('Bowler')
plt.ylabel('Average Runs per Wicket')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()



"""Best Bowling Economy Rate (Top 10 Bowlers)"""

# Step 25: Best Bowling Economy Rate

# Exclude wides and no-balls to count only legal deliveries
legal_deliveries = deliveries[(deliveries['wide_runs'] == 0) & (deliveries['noball_runs'] == 0)]

# Count legal deliveries per bowler
balls_bowled = legal_deliveries.groupby('bowler')['ball'].count()

# Convert balls to overs (6 balls = 1 over)
overs_bowled = balls_bowled / 6

# Total runs conceded by each bowler
runs_conceded = deliveries.groupby('bowler')['total_runs'].sum()

# Combine into DataFrame
economy_df = pd.concat([runs_conceded, overs_bowled], axis=1)
economy_df.columns = ['runs_conceded', 'overs']

# Filter: bowlers with minimum 50 overs
economy_df = economy_df[economy_df['overs'] >= 50]

# Calculate economy rate
economy_df['economy'] = economy_df['runs_conceded'] / economy_df['overs']

# Top 10 most economical bowlers
best_economy = economy_df.sort_values(by='economy').head(10)

# Display result
print("Top 10 Best Economy Rates (min 50 overs bowled):")
print(best_economy[['economy']])

# Plot
best_economy['economy'].plot(kind='bar', figsize=(10,5), color='teal')
plt.title('Top 10 Best Economy Rates (min 50 overs)')
plt.xlabel('Bowler')
plt.ylabel('Economy Rate (Runs per Over)')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()



"""Bowlers with Most Dot Balls"""

# Step 26: Bowlers with Most Dot Balls

# Filter only legal deliveries (exclude wides and no-balls)
legal_deliveries = deliveries[(deliveries['wide_runs'] == 0) & (deliveries['noball_runs'] == 0)]

# Dot balls: deliveries where total_runs = 0
dot_balls = legal_deliveries[legal_deliveries['total_runs'] == 0]

# Count dot balls per bowler
dot_ball_counts = dot_balls.groupby('bowler')['ball'].count().sort_values(ascending=False).head(10)

# Display result
print("Top 10 Bowlers with Most Dot Balls:")
print(dot_ball_counts)

# Plot
dot_ball_counts.plot(kind='bar', figsize=(10,5), color='tomato')
plt.title('Top 10 Bowlers with Most Dot Balls')
plt.xlabel('Bowler')
plt.ylabel('Number of Dot Balls')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

"""Most Sixes by a Batsman"""

# Step 27: Most Sixes by a Batsman

# Filter deliveries where batsman_runs is 6 (i.e., a six)
sixes_data = deliveries[deliveries['batsman_runs'] == 6]

# Count sixes for each batsman
most_sixes = sixes_data.groupby('batsman')['batsman_runs'].count().sort_values(ascending=False).head(10)

# Display result
print("Top 10 Batsmen with Most Sixes in IPL:")
print(most_sixes)

# Plot
import matplotlib.pyplot as plt
plt.figure(figsize=(10,6))
most_sixes.plot(kind='bar', color='orange')
plt.title("Top 10 Batsmen with Most Sixes in IPL")
plt.xlabel("Batsman")
plt.ylabel("Number of Sixes")
plt.xticks(rotation=45)
plt.grid(axis='y')
plt.tight_layout()
plt.show()



""" Batsman vs Bowler Matchups 🎯"""

# Step 28: Batsman vs Bowler – Most Dismissals

# Filter out rows where a player is dismissed
dismissals = deliveries[deliveries['player_dismissed'].notnull()]

# Group by bowler and batsman, then count dismissals
batsman_bowler_df = dismissals.groupby(['bowler', 'player_dismissed']).size().reset_index(name='dismissals')

# Sort by highest number of dismissals
top_matchups = batsman_bowler_df.sort_values(by='dismissals', ascending=False).head(10)

# Display result
print("Top 10 Batsman vs Bowler Dismissals:")
print(top_matchups)

# Plot
import seaborn as sns
plt.figure(figsize=(12,6))
sns.barplot(data=top_matchups, x='dismissals', y='player_dismissed', hue='bowler', dodge=False)
plt.title("Top Batsman vs Bowler Dismissals in IPL")
plt.xlabel("Number of Dismissals")
plt.ylabel("Batsman")
plt.legend(title="Bowler", bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()



"""Toss Decision Analysis"""

# Step 29: Toss Decision Analysis

# Count of toss decisions
toss_decision_count = matches['toss_decision'].value_counts()

# Display result
print("Toss Decision Count:")
print(toss_decision_count)

# Plot
import matplotlib.pyplot as plt
plt.figure(figsize=(6, 6))
colors = ['#66b3ff', '#ff9999']
plt.pie(toss_decision_count, labels=toss_decision_count.index, autopct='%1.1f%%', startangle=140, colors=colors)
plt.title("Toss Decisions in IPL")
plt.axis('equal')
plt.show()



"""Toss Winner vs Match Winner"""

# Step 30: Toss Winner vs Match Winner

# Check how many times the toss winner also won the match
toss_match_winner = matches[matches['toss_winner'] == matches['winner']]
count_toss_and_match_win = toss_match_winner.shape[0]
total_matches = matches.shape[0]
percentage = (count_toss_and_match_win / total_matches) * 100

# Display result
print(f"Number of times toss winner also won the match: {count_toss_and_match_win}")
print(f"Out of total matches: {total_matches}")
print(f"Percentage: {percentage:.2f}%")

# Plot
import matplotlib.pyplot as plt

labels = ['Toss Winner = Match Winner', 'Others']
sizes = [count_toss_and_match_win, total_matches - count_toss_and_match_win]
colors = ['#8fd9a8', '#ffb3e6']

plt.figure(figsize=(6, 6))
plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90, colors=colors)
plt.title("Impact of Toss on Match Outcome")
plt.axis('equal')
plt.show()

!pip install psycopg2-binary

!pip install pandas



!pip install psycopg2-binary sqlalchemy

import pandas as pd
from sqlalchemy import create_engine

# Connection URL format:
# postgresql://username:password@host:port/database

engine = create_engine('postgresql://postgres:your_password@localhost:5432/ipl_analysis')

